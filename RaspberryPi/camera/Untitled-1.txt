class videogui(QDialog):
    def __init__(self, *args):
        super().__init__()
        loadUi('videocam.ui',self)
        self.title= "HIGH CHOLESTEROL DETECTOR"

        #self.image = None
        self.capture = None

        #buttons sa QtDesigner
        self.start_Button.clicked.connect(self.startcam) #start yung camera
        self.cancel_Button.clicked.connect(self.cancelcam) #back to main window
        self.capture_Button.clicked.connect(self.capturecam) #cacapture ng image
        self.stop_Button.clicked.connect(self.stopcam) #cacapture ng image
        self.analyze_Button.clicked.connect(self.analyzecam) #next window
        
        # ------ Modification ------ #
        self.isCapturing = False
        self.ith_frame = 1
        #self.fps = 24
        # ------ Modification ------ #

        self.show()

    
    #start ng startcam
    def startcam(self): 

       #camerang gamit
        self.cap = cv2.VideoCapture(0)
        #sukat ng cam
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)

        #timer ng frame
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(5) 

        self.show()

    def update_frame(self):
        ret, self.frame = self.cap.read()
        self.frame = cv2.flip(self.frame, 1)
        self.displayImage(self.frame, 1)

         # ------ Modification ------ #
        # Save images if isCapturing
        if self.isCapturing:
            cv2.imwrite('img_%05d.jpg'%self.ith_frame, self.frame)
            #self.ith_frame += 1
        # ------ Modification ------ #

    def displayImage(self, img, window=1):
        #image format
        qformat =QtGui.QImage.Format_Indexed8
        if len(img.shape) == 3 :#[0] = rows, [1] = columns, [2] = channels
            if img.shape[2] == 4 :
                qformat = QtGui.QImage.Format_RGB888
            else:
                qformat = QtGui.QImage.Format_RGB888

        outImage = QtGui.QImage(img, img.shape[1], img.shape[0], img.strides[0], qformat)
        
        #BGR (opencv)>> RGB (computer)
        #swapping colors
        outImage = outImage.rgbSwapped()

        if window ==1:
            self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(outImage))
            self.imgLabel.setScaledContents(True)

        self.show()

    #End ng startcam

    #START >> Close the Gui
    def cancelcam(self): 
        reply = QMessageBox.question(self, 'Message',
            "Are you sure to quit?", QMessageBox.Yes | 
            QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.third = App()
            self.close()
        else:
            self.show()
    #END

    #pagcapture aalamin kung nagcacapture ba o hindi
    def capturecam(self):
        if not self.isCapturing:
            self.isCapturing = True
        else:
            self.isCapturing = False
    
    #Kailangan mastop yung frame para hindi na gumalaw yung picture
    #na nacapture
    def stopcam(self):
        self.timer.stop()#stops the frame

    def analyzecam(self):
        self.fourth = acceptance()
        self.close()

#FOURTH WINDOW
class acceptance(QWidget):
    #FUNCTION SA BUTTON NA ANALYZE
    def analyzeImage(self, imagepath):
        print("analyzeImage function")
        headers = {
            # Request headers
            'Content-Type': 'application/json',
            'Prediction-key': '2420e45f2ac54973bbb404bc64a0a5c4',
        }

        params = urllib.parse.urlencode({
            # Request parameters
            'application': 'Embedded2',
            # 'iterationId': '54b5827fe35c425e8e1f41ad596603b9',
        })
        print("Opening imagepath")
        body = open(imagepath, 'rb')


        try:
            print("Reading image..")
            image = cv2.imread(imagepath)
            cv2.imshow("Image",image)
            cv2.waitKey(0)
            cv2.destroyAllWindows()

            conn = http.client.HTTPSConnection("southcentralus.api.cognitive.microsoft.com")
            conn.request("POST", "/customvision/v1.1/Prediction/1f25e3faf08d43d7a5b844a094a0e658/image?%s" % params, body, headers)

            response = conn.getresponse()
            data = response.read()

            json_data = json.loads(data)

            print(json_data)
            Results = ""
            for tag in range(len(json_data)):
                print("The chance of ",json_data['Predictions'][tag]['Tag'],"is:")
                print("Probability is: ",round(json_data['Predictions'][tag]['Probability']*100,2),"%")
                Results+="The chance of {} is: {} % \n\n".format(json_data['Predictions'][tag]['Tag'],round(json_data['Predictions'][tag]['Probability']*100,2))
            QMessageBox.information(self, "Analysis Result",
                                        "\n"+Results)
            conn.close()
        except Exception as e:
            print(e)
            # print("An error occured")

    def Analyze(self):
        print("Load this function")
        self.analyzeImage(self.inputimage)

    def __init__(self,imagepath):
        super().__init__() 
        self.title= "HIGH CHOLESTEROL DETECTOR"
        self.x=200 # or left
        self.y=200 # or top
        
        #full screen
        self.appli = QApplication([])  
        self.screenie = self.appli.desktop().availableGeometry(-1)
        self.width, self.height = self.screenie.width(), self.screenie.height()
 
        self.initUI()

        #Set frame to center
        self.qtRectangle = self.frameGeometry()
        self.centerPoint = QDesktopWidget().screenGeometry(-1).center()
        self.qtRectangle.moveCenter(self.centerPoint)
        self.move(self.qtRectangle.topLeft())

        # self.cam()
        self.inputimage=imagepath

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.x,self.y,self.width,self.height)
       
        self.okButton = QPushButton('Retake', self)
        self.okButton.resize(250,100)
        self.okButton.move(50,100)  # button.move(x,y)
        self.okButton.clicked.connect(self.retake)

        self.aButton = QPushButton('Analyze', self)
        self.aButton.resize(250,100)
        self.aButton.move(50,250)  # button.move(x,y)
        self.aButton.clicked.connect(self.Analyze)

        self.cButton = QPushButton('Cancel', self)
        self.cButton.resize(250,100)
        self.cButton.move(50,350)  # button.move(x,y)
        self.cButton.clicked.connect(self.cancel)

        self.show()

    def retake(self):
        self.fourth = imagecapture()
        self.close()

    def cancel(self):#PANG TAWAG SA CLOSE
          #MESSAGEBOX  
        reply = QMessageBox.question(self, 'Message',
            "Are you sure to quit?", QMessageBox.Yes | 
            QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.third = App()
            self.close()
        else:
            self.show()